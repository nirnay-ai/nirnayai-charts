environments:
  default:
    values:
    - values.yaml
---

helmfiles:
  - path: subhelm/minio-operator-helmfile.yaml
    values:
      - minio:
          enabled: {{ .Values.minio.enabled }}
  - path: subhelm/trino-nginx-helmfile.yaml

releases:
  - name: hai-mongodb
    namespace: hai-mongodb
    chart: bitnami/mongodb
    set:
    - name: architecture
      value: replicaset
    - name: replicaCount
      value: 2

  - name: minio-tenant
    namespace: hai-minio
    chart: minio/tenant
    condition: minio.enabled
    wait: true
    waitForJobs: true
    set:
      - name: secrets.accessKey
        value: {{ .Values.lakehouse.storage.config.accessKey }}
      - name: secrets.secretKey
        value: {{ .Values.lakehouse.storage.config.secretKey }}
      - name: tenant.pools[0].server
        value: 4
      - name: tenant.pools[0].volumesPerServer
        value: 4
      - name: tenant.certificate.requestAutoCert
        value: false
      - name: log.db.volumeClaimTemplate.spec.storageClassName
        value: ""
      - name: tenant.log.audit.diskCapacityGB
        value: false
      - name: tenant.prometheus.diskCapacityGB
        value: false

  - name: hive-metastore
    namespace: hai-trino
    chart: saikiran2603/hive-metastore
    set:
      - name: s3.endpoint
          {{ if eq .Values.minio.enabled true }}
        value: "http://{{.Values.lakehouse.storage.minio.server}}"
          {{ else }}
        value: "https://{{ .Values.lakehouse.storage.s3.server }}"
          {{ end }}
      - name: s3.accessKey
        value: {{ .Values.lakehouse.storage.config.accessKey }}
      - name: s3.secretKey
        value: {{ .Values.lakehouse.storage.config.secretKey }}
      - name: s3.warehouseBucket
        value: {{ .Values.lakehouse.storage.config.storage_bucket_structured }}

  - name: hai-trino
    namespace: hai-trino
    chart: valeriano-manassero/trino
    values:
      - auth:
          passwordAuth: "admin:$2y$10$42r4mc4Dv/ujHdTa.NYwdeyad9Yx16JyD2uwDIc.eRvdXmJ.2Dia6"
        connectors:
          hive.properties: |-
            connector.name=hive
            hive.allow-drop-table=true
            hive.metastore.uri=thrift://hive-metastore:9083
            hive.s3.aws-access-key={{ .Values.lakehouse.storage.config.accessKey }}
            hive.s3.aws-secret-key={{ .Values.lakehouse.storage.config.secretKey }}
              {{ if eq .Values.minio.enabled true }}
            hive.s3.endpoint="{{.Values.lakehouse.storage.minio.server}}"
            hive.s3.ssl.enabled=false
              {{ else }}
            hive.s3.endpoint="{{.Values.lakehouse.storage.s3.server}}"
            hive.s3.ssl.enabled=true
              {{ end }}
            hive.s3.path-style-access=true
            hive.non-managed-table-writes-enabled=true
            hive.s3select-pushdown.enabled=true
            hive.timestamp-precision=NANOSECONDS
    set:
      - name: image.repository
        value: 'trinodb/trino'
      - name: image.tag
        value: 'latest'
      - name: worker.replicas
        value: 3
      - name: worker.autoscaler.enabled
        value: true
      - name: worker.autoscaler.maxReplicas
        value: 5
      - name: worker.autoscaler.targetCPUUtilizationPercentage
        value: 50
      - name: config.general.processForwarded
        value: true
      - name: config.general.authenticationType
        value: "PASSWORD"
      - name: config.general.internalCommunicationSharedSecret
        value: "test123"
      - name: ingress.enabled
        value: false

  - name: lakehouse
    chart: nirnayai-charts/nirnayai-lakehouse
    namespace: "{{ .Values.lakehouse.app_namespace }}"
    values:
      - platform_namespace: {{ .Values.lakehouse.app_namespace }}
      - workers_namespace: {{ .Values.lakehouse.worker_namespace }}
      - registryCredentials:
          registryServer: "{{ .Values.lakehouse.registryServer }}"
          registry: "{{ .Values.lakehouse.registry }}"
          tag: "{{ .Values.lakehouse.tag }}"
          username: "{{ .Values.lakehouse.docker_username }}"
          password: "{{ .Values.lakehouse.docker_password }}"
      - storage_config:
          storage_server: {{ .Values.minio.enabled | ternary .Values.lakehouse.storage.minio.server .Values.lakehouse.storage.s3.server | quote }}
          storage_access_key: "{{ .Values.lakehouse.storage.config.accessKey }}"
          storage_secret_key: "{{ .Values.lakehouse.storage.config.secretKey }}"
          storage_backend: {{ .Values.minio.enabled | ternary "minio" "s3" | quote }}
          storage_bucket_structured: "{{ .Values.lakehouse.storage.config.storage_bucket_structured }}"
          storage_bucket_unstructured: "{{ .Values.lakehouse.storage.config.storage_bucket_unstructured }}"
          storage_bucket_notebooks: "{{ .Values.lakehouse.storage.config.storage_bucket_notebooks }}"
      - ingress_details:
          enabled: {{ .Values.lakehouse.ingress.enabled }}
          platform:
            ingress_host_name: {{ .Values.lakehouse.ingress.host_name }}
            tls_secret_name: {{ .Values.lakehouse.ingress.tls_secret }}

  - name: oauth2
    chart: oauth2-proxy/oauth2-proxy
    condition: oauth2Proxy.enabled
    namespace: oauth2
    values:
      - {{ toYaml .Values.oauth2Proxy.oauth2ProxyValues | nindent 8 }}

  - name: oauth-app-ingress
    chart: incubator/raw
    namespace: "{{ .Values.lakehouse.app_namespace }}"
    condition: oauth2Proxy.enabled
    values:
      - resources:
        - apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: hai-ingress
            namespace: "{{ .Values.lakehouse.app_namespace }}"
            annotations:
              nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-User,X-Auth-Request-Email
              nginx.ingress.kubernetes.io/auth-url: "http://oauth2-oauth2-proxy.oauth2.svc.cluster.local:80/oauth2/auth"
              nginx.ingress.kubernetes.io/auth-signin: "http://{{ .Values.oauth2Proxy.lakehouse.ingress.host_name }}/oauth2/start"
          spec:
            ingressClassName: nginx
            rules:
              - host: {{ .Values.oauth2Proxy.lakehouse.ingress.host_name }}
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: ui-container
                          port:
                            number: 3000
            tls:
              - hosts:
                  - {{ .Values.oauth2Proxy.lakehouse.ingress.host_name }}
                secretName: {{ .Values.oauth2Proxy.lakehouse.ingress.tls_secret }}

  - name: loki
    namespace: loki
    chart: grafana/loki-stack
    set:
      - name: fluent-bit.enabled
        value: true
      - name: promtail.enabled
        value: false
      - name: grafana.enabled
        value: true
      - name: prometheus.enabled
        value: true
      - name: prometheus.alertmanager.persistentVolume.enabled
        value: true
      - name: prometheus.server.persistentVolume.enabled
        value: true

  - name: superset
    namespace: hai-superset
    chart: superset/superset
    values:
      - bootstrapScript: |
          #!/bin/bash
          pip install clickhouse-driver>=0.2.0 \
            clickhouse-sqlalchemy>=0.1.6 \
            sqlalchemy-trino && \
          if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid 0" > ~/bootstrap; fi
      - extraConfigs:
          import_datasources.yaml: |
            databases:
            - allow_file_upload: true
              allow_ctas: true
              allow_cvas: true
              database_name: lakehouse
              sqlalchemy_uri: trino://admin:admin@trino.nirnay.com:443/hive/default
              tables: []
              extra: "{\"engine_params\": {\"connect_args\": {\"verify\": false}}}"

      - ingress:
          enabled: true
          ingressClassName: nginx
          annotations:
            # kubernetes.io/tls-acme: "true"
            # Extend timeout to allow long running queries.
             nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
             nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
             nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
          path: /
          pathType: ImplementationSpecific
          hosts:
            - superset.nirnay.com
          tls: []

repositories:
  - name: mongodb
    url: https://charts.bitnami.com/bitnami

  - name: saikiran2603
    url: https://saikiran2603.github.io/helm-charts

  - name: valeriano-manassero
    url: https://valeriano-manassero.github.io/helm-charts

  - name: grafana
    url: https://grafana.github.io/helm-charts

  - name: superset
    url: https://apache.github.io/superset

  - name: nirnayai-charts
    url: https://nirnay-ai.github.io/nirnayai-charts/

  - name: minio
    url: https://operator.min.io/

  - name: oauth2-proxy
    url: https://oauth2-proxy.github.io/manifests/

  - name: incubator
    url: https://charts.helm.sh/incubator